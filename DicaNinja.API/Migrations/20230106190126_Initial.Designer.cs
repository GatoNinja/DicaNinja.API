// <auto-generated />
using System;
using DicaNinja.API.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DicaNinja.API.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20230106190126_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BooksId")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.Property<Guid>("BooksId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("TEXT");

                    b.HasKey("BooksId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("REAL")
                        .HasColumnName("average_ratting");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT")
                        .HasColumnName("image");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT")
                        .HasColumnName("language");

                    b.Property<int?>("PageCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("page_count");

                    b.Property<string>("PreviewLink")
                        .HasColumnType("TEXT")
                        .HasColumnName("preview_link");

                    b.Property<string>("PublicationDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("publication_date");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT")
                        .HasColumnName("publisher");

                    b.Property<string>("Subtitle")
                        .HasColumnType("TEXT")
                        .HasColumnName("subtitle");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Bookmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT")
                        .HasColumnName("book_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("bookmarks");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT")
                        .HasColumnName("book_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Follower", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("TEXT")
                        .HasColumnName("follower_id");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("UserId", "FollowedId")
                        .IsUnique();

                    b.ToTable("followers");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Identifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT")
                        .HasColumnName("book_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("isbn");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("identifiers");
                });

            modelBuilder.Entity("DicaNinja.API.Models.PasswordRecovery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset>("ExpireDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("expire_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("password_recoveries");
                });

            modelBuilder.Entity("DicaNinja.API.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("refresh_token_expiry_time");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("BookId")
                        .HasColumnType("TEXT")
                        .HasColumnName("book_id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("rating");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("DicaNinja.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<DateTimeOffset?>("Updated")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("TEXT")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("DicaNinja.API.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DicaNinja.API.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookCategory", b =>
                {
                    b.HasOne("DicaNinja.API.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DicaNinja.API.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DicaNinja.API.Models.Bookmark", b =>
                {
                    b.HasOne("DicaNinja.API.Models.Book", "Book")
                        .WithMany("Bookmarks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DicaNinja.API.Models.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Follower", b =>
                {
                    b.HasOne("DicaNinja.API.Models.User", "User")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DicaNinja.API.Models.User", "FollowedUser")
                        .WithMany("Following")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Identifier", b =>
                {
                    b.HasOne("DicaNinja.API.Models.Book", "Book")
                        .WithMany("Identifiers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("DicaNinja.API.Models.PasswordRecovery", b =>
                {
                    b.HasOne("DicaNinja.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DicaNinja.API.Models.RefreshToken", b =>
                {
                    b.HasOne("DicaNinja.API.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DicaNinja.API.Models.Review", b =>
                {
                    b.HasOne("DicaNinja.API.Models.Book", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DicaNinja.API.Models.User", null)
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DicaNinja.API.Models.Book", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Identifiers");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DicaNinja.API.Models.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
